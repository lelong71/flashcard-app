{"ast":null,"code":"var _jsxFileName = \"/Users/longl488/dev/tmp/flashcard/src/components/UploadSection.tsx\",\n  _s = $RefreshSig$();\nimport React, { useCallback, useState, useEffect } from 'react';\nimport { motion, AnimatePresence } from 'framer-motion';\nimport { Box, VStack, HStack, Heading, Text, Button, Icon, Alert, AlertIcon, AlertTitle, AlertDescription, useToast, Badge, Divider, useColorModeValue, SimpleGrid } from '@chakra-ui/react';\nimport { Upload, FileText, FolderOpen, RefreshCw } from 'lucide-react';\nimport { useFlashcard } from '../contexts/FlashcardContext';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport function UploadSection() {\n  _s();\n  const {\n    state,\n    dispatch\n  } = useFlashcard();\n  const [isDragOver, setIsDragOver] = useState(false);\n  const [availableSets, setAvailableSets] = useState([]);\n  const [selectedSet, setSelectedSet] = useState('');\n  const [isScanning, setIsScanning] = useState(false);\n  const toast = useToast();\n  const bgColor = useColorModeValue('white', 'gray.800');\n  const borderColor = useColorModeValue('gray.200', 'gray.700');\n  const scanForFlashcardSets = useCallback(async () => {\n    setIsScanning(true);\n    try {\n      // Load the metadata file to get organized flashcard sets\n      const metadataResponse = await fetch('/flashcard-data/sets-metadata.json');\n      if (!metadataResponse.ok) {\n        throw new Error('Could not load flashcard sets metadata');\n      }\n      const metadata = await metadataResponse.json();\n      const availableSets = [];\n\n      // Check which files actually exist\n      for (const set of metadata.flashcard_sets) {\n        try {\n          const response = await fetch(`/flashcard-data/${set.filename}`);\n          if (response.ok) {\n            availableSets.push(set);\n          }\n        } catch (error) {\n          console.log(`File ${set.filename} not found`);\n        }\n      }\n      setAvailableSets(availableSets);\n\n      // Auto-select the first set if available\n      if (availableSets.length > 0 && !selectedSet) {\n        setSelectedSet(availableSets[0].filename);\n        // We'll load the file in a separate effect\n      }\n    } catch (error) {\n      console.log('No flashcard sets found');\n      setAvailableSets([]);\n    } finally {\n      setIsScanning(false);\n    }\n  }, [selectedSet]);\n  const loadSelectedSet = useCallback(async filename => {\n    if (!filename) return;\n    dispatch({\n      type: 'SET_LOADING',\n      payload: true\n    });\n    dispatch({\n      type: 'SET_ERROR',\n      payload: null\n    });\n    try {\n      // Load the actual JSON file from the flashcard-data folder\n      const response = await fetch(`/flashcard-data/${filename}`);\n      if (!response.ok) {\n        throw new Error(`HTTP error! status: ${response.status}`);\n      }\n      const data = await response.json();\n      if (!data.flashcards || !Array.isArray(data.flashcards)) {\n        throw new Error('Invalid JSON format: missing flashcards array');\n      }\n      if (data.flashcards.length === 0) {\n        throw new Error('No flashcards found in the JSON file');\n      }\n      dispatch({\n        type: 'SET_FLASHCARDS',\n        payload: data.flashcards\n      });\n      dispatch({\n        type: 'SET_METADATA',\n        payload: data.metadata || {}\n      });\n      toast({\n        title: 'Success!',\n        description: `Loaded ${data.flashcards.length} flashcards from ${filename}`,\n        status: 'success',\n        duration: 3000,\n        isClosable: true\n      });\n    } catch (error) {\n      const errorMessage = `Failed to load ${filename}: ${error instanceof Error ? error.message : 'Unknown error'}`;\n      dispatch({\n        type: 'SET_ERROR',\n        payload: errorMessage\n      });\n      toast({\n        title: 'Error loading file',\n        description: errorMessage,\n        status: 'error',\n        duration: 5000,\n        isClosable: true\n      });\n    } finally {\n      dispatch({\n        type: 'SET_LOADING',\n        payload: false\n      });\n    }\n  }, [dispatch, toast]);\n\n  // Scan for flashcard sets on component mount\n  useEffect(() => {\n    scanForFlashcardSets();\n  }, [scanForFlashcardSets]);\n\n  // Load selected set when it changes\n  useEffect(() => {\n    if (selectedSet) {\n      loadSelectedSet(selectedSet);\n    }\n  }, [selectedSet, loadSelectedSet]);\n  const handleFileUpload = useCallback(async file => {\n    if (!file.name.endsWith('.json')) {\n      toast({\n        title: 'Invalid file type',\n        description: 'Please select a JSON file',\n        status: 'error',\n        duration: 5000,\n        isClosable: true\n      });\n      return;\n    }\n    dispatch({\n      type: 'SET_LOADING',\n      payload: true\n    });\n    dispatch({\n      type: 'SET_ERROR',\n      payload: null\n    });\n    try {\n      const text = await file.text();\n      const data = JSON.parse(text);\n      if (!data.flashcards || !Array.isArray(data.flashcards)) {\n        throw new Error('Invalid JSON format: missing flashcards array');\n      }\n      if (data.flashcards.length === 0) {\n        throw new Error('No flashcards found in the JSON file');\n      }\n      dispatch({\n        type: 'SET_FLASHCARDS',\n        payload: data.flashcards\n      });\n      dispatch({\n        type: 'SET_METADATA',\n        payload: data.metadata || {}\n      });\n      toast({\n        title: 'Success!',\n        description: `Loaded ${data.flashcards.length} flashcards from ${file.name}`,\n        status: 'success',\n        duration: 3000,\n        isClosable: true\n      });\n    } catch (error) {\n      const errorMessage = `Failed to load JSON file: ${error instanceof Error ? error.message : 'Unknown error'}`;\n      dispatch({\n        type: 'SET_ERROR',\n        payload: errorMessage\n      });\n      toast({\n        title: 'Error loading file',\n        description: errorMessage,\n        status: 'error',\n        duration: 5000,\n        isClosable: true\n      });\n    }\n  }, [dispatch, toast]);\n  const handleDrop = useCallback(e => {\n    e.preventDefault();\n    setIsDragOver(false);\n    const files = e.dataTransfer.files;\n    if (files.length > 0) {\n      handleFileUpload(files[0]);\n    }\n  }, [handleFileUpload]);\n  const handleDragOver = useCallback(e => {\n    e.preventDefault();\n    setIsDragOver(true);\n  }, []);\n  const handleDragLeave = useCallback(e => {\n    e.preventDefault();\n    setIsDragOver(false);\n  }, []);\n  const handleFileInput = useCallback(e => {\n    var _e$target$files;\n    const file = (_e$target$files = e.target.files) === null || _e$target$files === void 0 ? void 0 : _e$target$files[0];\n    if (file) {\n      handleFileUpload(file);\n    }\n  }, [handleFileUpload]);\n  const handleSetSelect = useCallback(filename => {\n    setSelectedSet(filename);\n    loadSelectedSet(filename);\n  }, [loadSelectedSet]);\n  if (state.flashcards.length > 0) {\n    return null;\n  }\n  return /*#__PURE__*/_jsxDEV(AnimatePresence, {\n    children: /*#__PURE__*/_jsxDEV(motion.div, {\n      initial: {\n        opacity: 0,\n        y: 20\n      },\n      animate: {\n        opacity: 1,\n        y: 0\n      },\n      exit: {\n        opacity: 0,\n        y: -20\n      },\n      transition: {\n        duration: 0.5\n      },\n      style: {\n        width: '100%'\n      },\n      children: /*#__PURE__*/_jsxDEV(Box, {\n        bg: bgColor,\n        rounded: \"lg\",\n        shadow: \"lg\",\n        p: 8,\n        mb: 8,\n        borderWidth: \"1px\",\n        borderColor: borderColor,\n        children: /*#__PURE__*/_jsxDEV(VStack, {\n          spacing: 6,\n          textAlign: \"center\",\n          children: [/*#__PURE__*/_jsxDEV(motion.div, {\n            initial: {\n              scale: 0\n            },\n            animate: {\n              scale: 1\n            },\n            transition: {\n              delay: 0.2,\n              type: \"spring\",\n              stiffness: 200\n            },\n            children: /*#__PURE__*/_jsxDEV(Icon, {\n              as: FolderOpen,\n              w: 16,\n              h: 16,\n              color: \"blue.500\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 258,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 253,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(VStack, {\n            spacing: 4,\n            children: [/*#__PURE__*/_jsxDEV(Heading, {\n              size: \"lg\",\n              color: \"gray.800\",\n              children: \"Welcome to Flashcard App! \\uD83C\\uDF93\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 262,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(Text, {\n              color: \"gray.600\",\n              fontSize: \"lg\",\n              children: \"Choose from your organized flashcard sets\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 266,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 261,\n            columnNumber: 13\n          }, this), availableSets.length > 0 && /*#__PURE__*/_jsxDEV(Box, {\n            w: \"100%\",\n            textAlign: \"left\",\n            children: [/*#__PURE__*/_jsxDEV(HStack, {\n              justify: \"space-between\",\n              mb: 4,\n              children: [/*#__PURE__*/_jsxDEV(Text, {\n                fontWeight: \"semibold\",\n                color: \"gray.700\",\n                fontSize: \"lg\",\n                children: \"\\uD83D\\uDCC1 Available Flashcard Sets\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 275,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(Button, {\n                size: \"sm\",\n                variant: \"ghost\",\n                leftIcon: /*#__PURE__*/_jsxDEV(Icon, {\n                  as: RefreshCw\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 281,\n                  columnNumber: 31\n                }, this),\n                onClick: scanForFlashcardSets,\n                isLoading: isScanning,\n                children: \"Refresh\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 278,\n                columnNumber: 19\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 274,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(SimpleGrid, {\n              columns: {\n                base: 1,\n                md: 2\n              },\n              spacing: 4,\n              children: availableSets.map((set, index) => /*#__PURE__*/_jsxDEV(motion.div, {\n                initial: {\n                  opacity: 0,\n                  x: -20\n                },\n                animate: {\n                  opacity: 1,\n                  x: 0\n                },\n                transition: {\n                  delay: index * 0.1\n                },\n                children: /*#__PURE__*/_jsxDEV(Box, {\n                  p: 4,\n                  borderWidth: \"1px\",\n                  borderColor: selectedSet === set.filename ? \"blue.300\" : \"gray.200\",\n                  bg: selectedSet === set.filename ? \"blue.50\" : \"transparent\",\n                  rounded: \"lg\",\n                  cursor: \"pointer\",\n                  _hover: {\n                    borderColor: \"blue.300\",\n                    bg: \"blue.50\"\n                  },\n                  onClick: () => handleSetSelect(set.filename),\n                  transition: \"all 0.2s\",\n                  children: /*#__PURE__*/_jsxDEV(VStack, {\n                    align: \"start\",\n                    spacing: 2,\n                    children: [/*#__PURE__*/_jsxDEV(HStack, {\n                      justify: \"space-between\",\n                      w: \"100%\",\n                      children: [/*#__PURE__*/_jsxDEV(HStack, {\n                        spacing: 3,\n                        children: [/*#__PURE__*/_jsxDEV(Icon, {\n                          as: FileText,\n                          color: \"blue.500\"\n                        }, void 0, false, {\n                          fileName: _jsxFileName,\n                          lineNumber: 314,\n                          columnNumber: 31\n                        }, this), /*#__PURE__*/_jsxDEV(Text, {\n                          fontWeight: \"bold\",\n                          fontSize: \"md\",\n                          children: set.title\n                        }, void 0, false, {\n                          fileName: _jsxFileName,\n                          lineNumber: 315,\n                          columnNumber: 31\n                        }, this)]\n                      }, void 0, true, {\n                        fileName: _jsxFileName,\n                        lineNumber: 313,\n                        columnNumber: 29\n                      }, this), selectedSet === set.filename && /*#__PURE__*/_jsxDEV(Badge, {\n                        colorScheme: \"blue\",\n                        variant: \"subtle\",\n                        children: \"Selected\"\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 320,\n                        columnNumber: 31\n                      }, this)]\n                    }, void 0, true, {\n                      fileName: _jsxFileName,\n                      lineNumber: 312,\n                      columnNumber: 27\n                    }, this), /*#__PURE__*/_jsxDEV(Text, {\n                      fontSize: \"sm\",\n                      color: \"gray.600\",\n                      children: set.description\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 326,\n                      columnNumber: 27\n                    }, this), /*#__PURE__*/_jsxDEV(HStack, {\n                      spacing: 2,\n                      children: [/*#__PURE__*/_jsxDEV(Badge, {\n                        colorScheme: \"green\",\n                        variant: \"outline\",\n                        children: [set.card_count, \" cards\"]\n                      }, void 0, true, {\n                        fileName: _jsxFileName,\n                        lineNumber: 331,\n                        columnNumber: 29\n                      }, this), /*#__PURE__*/_jsxDEV(Badge, {\n                        colorScheme: \"purple\",\n                        variant: \"outline\",\n                        children: set.category\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 334,\n                        columnNumber: 29\n                      }, this), /*#__PURE__*/_jsxDEV(Badge, {\n                        colorScheme: \"orange\",\n                        variant: \"outline\",\n                        children: set.difficulty\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 337,\n                        columnNumber: 29\n                      }, this)]\n                    }, void 0, true, {\n                      fileName: _jsxFileName,\n                      lineNumber: 330,\n                      columnNumber: 27\n                    }, this)]\n                  }, void 0, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 311,\n                    columnNumber: 25\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 297,\n                  columnNumber: 23\n                }, this)\n              }, set.id, false, {\n                fileName: _jsxFileName,\n                lineNumber: 291,\n                columnNumber: 21\n              }, this))\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 289,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 273,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(Divider, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 350,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Box, {\n            w: \"100%\",\n            textAlign: \"left\",\n            children: [/*#__PURE__*/_jsxDEV(Text, {\n              fontWeight: \"semibold\",\n              color: \"gray.700\",\n              mb: 3,\n              children: \"\\uD83D\\uDCE4 Upload New Flashcard Set\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 354,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(Box, {\n              borderWidth: 2,\n              borderStyle: \"dashed\",\n              borderColor: isDragOver ? \"blue.500\" : \"gray.300\",\n              bg: isDragOver ? \"blue.50\" : \"transparent\",\n              rounded: \"lg\",\n              p: 6,\n              transition: \"all 0.2s\",\n              _hover: {\n                borderColor: \"gray.400\"\n              },\n              onDrop: handleDrop,\n              onDragOver: handleDragOver,\n              onDragLeave: handleDragLeave,\n              children: /*#__PURE__*/_jsxDEV(VStack, {\n                spacing: 4,\n                children: [/*#__PURE__*/_jsxDEV(\"label\", {\n                  htmlFor: \"jsonFile\",\n                  style: {\n                    cursor: 'pointer'\n                  },\n                  children: /*#__PURE__*/_jsxDEV(motion.div, {\n                    whileHover: {\n                      scale: 1.05\n                    },\n                    whileTap: {\n                      scale: 0.95\n                    },\n                    children: /*#__PURE__*/_jsxDEV(Button, {\n                      colorScheme: \"brand\",\n                      size: \"lg\",\n                      leftIcon: /*#__PURE__*/_jsxDEV(Icon, {\n                        as: Upload\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 380,\n                        columnNumber: 35\n                      }, this),\n                      children: \"Choose JSON File\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 377,\n                      columnNumber: 23\n                    }, this)\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 373,\n                    columnNumber: 21\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 372,\n                  columnNumber: 19\n                }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n                  type: \"file\",\n                  id: \"jsonFile\",\n                  accept: \".json\",\n                  style: {\n                    display: 'none'\n                  },\n                  onChange: handleFileInput\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 387,\n                  columnNumber: 19\n                }, this), /*#__PURE__*/_jsxDEV(Text, {\n                  fontSize: \"sm\",\n                  color: \"gray.500\",\n                  children: \"or drag and drop JSON file here\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 395,\n                  columnNumber: 19\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 371,\n                columnNumber: 17\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 358,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 353,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(AnimatePresence, {\n            children: state.error && /*#__PURE__*/_jsxDEV(motion.div, {\n              initial: {\n                opacity: 0,\n                height: 0\n              },\n              animate: {\n                opacity: 1,\n                height: 'auto'\n              },\n              exit: {\n                opacity: 0,\n                height: 0\n              },\n              style: {\n                width: '100%'\n              },\n              children: /*#__PURE__*/_jsxDEV(Alert, {\n                status: \"error\",\n                rounded: \"lg\",\n                children: [/*#__PURE__*/_jsxDEV(AlertIcon, {}, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 412,\n                  columnNumber: 21\n                }, this), /*#__PURE__*/_jsxDEV(Box, {\n                  children: [/*#__PURE__*/_jsxDEV(AlertTitle, {\n                    children: \"Error Loading File\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 414,\n                    columnNumber: 23\n                  }, this), /*#__PURE__*/_jsxDEV(AlertDescription, {\n                    children: state.error\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 415,\n                    columnNumber: 23\n                  }, this)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 413,\n                  columnNumber: 21\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 411,\n                columnNumber: 19\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 405,\n              columnNumber: 17\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 403,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 252,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 243,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 236,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 235,\n    columnNumber: 5\n  }, this);\n}\n_s(UploadSection, \"GbUBfHSzYZfoBF4SGl3eCbRaJmE=\", false, function () {\n  return [useFlashcard, useToast, useColorModeValue, useColorModeValue];\n});\n_c = UploadSection;\nvar _c;\n$RefreshReg$(_c, \"UploadSection\");","map":{"version":3,"names":["React","useCallback","useState","useEffect","motion","AnimatePresence","Box","VStack","HStack","Heading","Text","Button","Icon","Alert","AlertIcon","AlertTitle","AlertDescription","useToast","Badge","Divider","useColorModeValue","SimpleGrid","Upload","FileText","FolderOpen","RefreshCw","useFlashcard","jsxDEV","_jsxDEV","UploadSection","_s","state","dispatch","isDragOver","setIsDragOver","availableSets","setAvailableSets","selectedSet","setSelectedSet","isScanning","setIsScanning","toast","bgColor","borderColor","scanForFlashcardSets","metadataResponse","fetch","ok","Error","metadata","json","set","flashcard_sets","response","filename","push","error","console","log","length","loadSelectedSet","type","payload","status","data","flashcards","Array","isArray","title","description","duration","isClosable","errorMessage","message","handleFileUpload","file","name","endsWith","text","JSON","parse","handleDrop","e","preventDefault","files","dataTransfer","handleDragOver","handleDragLeave","handleFileInput","_e$target$files","target","handleSetSelect","children","div","initial","opacity","y","animate","exit","transition","style","width","bg","rounded","shadow","p","mb","borderWidth","spacing","textAlign","scale","delay","stiffness","as","w","h","color","fileName","_jsxFileName","lineNumber","columnNumber","size","fontSize","justify","fontWeight","variant","leftIcon","onClick","isLoading","columns","base","md","map","index","x","cursor","_hover","align","colorScheme","card_count","category","difficulty","id","borderStyle","onDrop","onDragOver","onDragLeave","htmlFor","whileHover","whileTap","accept","display","onChange","height","_c","$RefreshReg$"],"sources":["/Users/longl488/dev/tmp/flashcard/src/components/UploadSection.tsx"],"sourcesContent":["import React, { useCallback, useState, useEffect } from 'react';\nimport { motion, AnimatePresence } from 'framer-motion';\nimport { \n  Box, \n  VStack, \n  HStack,\n  Heading, \n  Text, \n  Button, \n  Icon, \n  Alert, \n  AlertIcon, \n  AlertTitle, \n  AlertDescription,\n  useToast,\n  Badge,\n  Divider,\n  useColorModeValue,\n  SimpleGrid\n} from '@chakra-ui/react';\nimport { Upload, FileText, FolderOpen, RefreshCw } from 'lucide-react';\nimport { useFlashcard } from '../contexts/FlashcardContext';\n\ninterface FlashcardSet {\n  id: string;\n  filename: string;\n  title: string;\n  description: string;\n  category: string;\n  difficulty: string;\n  card_count: number;\n  created_date: string;\n  tags: string[];\n}\n\nexport function UploadSection() {\n  const { state, dispatch } = useFlashcard();\n  const [isDragOver, setIsDragOver] = useState(false);\n  const [availableSets, setAvailableSets] = useState<FlashcardSet[]>([]);\n  const [selectedSet, setSelectedSet] = useState<string>('');\n  const [isScanning, setIsScanning] = useState(false);\n  const toast = useToast();\n  \n  const bgColor = useColorModeValue('white', 'gray.800');\n  const borderColor = useColorModeValue('gray.200', 'gray.700');\n\n  const scanForFlashcardSets = useCallback(async () => {\n    setIsScanning(true);\n    try {\n      // Load the metadata file to get organized flashcard sets\n      const metadataResponse = await fetch('/flashcard-data/sets-metadata.json');\n      if (!metadataResponse.ok) {\n        throw new Error('Could not load flashcard sets metadata');\n      }\n      \n      const metadata = await metadataResponse.json();\n      const availableSets: FlashcardSet[] = [];\n      \n      // Check which files actually exist\n      for (const set of metadata.flashcard_sets) {\n        try {\n          const response = await fetch(`/flashcard-data/${set.filename}`);\n          if (response.ok) {\n            availableSets.push(set);\n          }\n        } catch (error) {\n          console.log(`File ${set.filename} not found`);\n        }\n      }\n      \n      setAvailableSets(availableSets);\n      \n      // Auto-select the first set if available\n      if (availableSets.length > 0 && !selectedSet) {\n        setSelectedSet(availableSets[0].filename);\n        // We'll load the file in a separate effect\n      }\n    } catch (error) {\n      console.log('No flashcard sets found');\n      setAvailableSets([]);\n    } finally {\n      setIsScanning(false);\n    }\n  }, [selectedSet]);\n\n  const loadSelectedSet = useCallback(async (filename: string) => {\n    if (!filename) return;\n\n    dispatch({ type: 'SET_LOADING', payload: true });\n    dispatch({ type: 'SET_ERROR', payload: null });\n\n    try {\n      // Load the actual JSON file from the flashcard-data folder\n      const response = await fetch(`/flashcard-data/${filename}`);\n      if (!response.ok) {\n        throw new Error(`HTTP error! status: ${response.status}`);\n      }\n      \n      const data = await response.json();\n\n      if (!data.flashcards || !Array.isArray(data.flashcards)) {\n        throw new Error('Invalid JSON format: missing flashcards array');\n      }\n\n      if (data.flashcards.length === 0) {\n        throw new Error('No flashcards found in the JSON file');\n      }\n\n      dispatch({ type: 'SET_FLASHCARDS', payload: data.flashcards });\n      dispatch({ type: 'SET_METADATA', payload: data.metadata || {} });\n      \n      toast({\n        title: 'Success!',\n        description: `Loaded ${data.flashcards.length} flashcards from ${filename}`,\n        status: 'success',\n        duration: 3000,\n        isClosable: true,\n      });\n    } catch (error) {\n      const errorMessage = `Failed to load ${filename}: ${error instanceof Error ? error.message : 'Unknown error'}`;\n      dispatch({ type: 'SET_ERROR', payload: errorMessage });\n      \n      toast({\n        title: 'Error loading file',\n        description: errorMessage,\n        status: 'error',\n        duration: 5000,\n        isClosable: true,\n      });\n    } finally {\n      dispatch({ type: 'SET_LOADING', payload: false });\n    }\n  }, [dispatch, toast]);\n\n  // Scan for flashcard sets on component mount\n  useEffect(() => {\n    scanForFlashcardSets();\n  }, [scanForFlashcardSets]);\n\n  // Load selected set when it changes\n  useEffect(() => {\n    if (selectedSet) {\n      loadSelectedSet(selectedSet);\n    }\n  }, [selectedSet, loadSelectedSet]);\n\n  const handleFileUpload = useCallback(async (file: File) => {\n    if (!file.name.endsWith('.json')) {\n      toast({\n        title: 'Invalid file type',\n        description: 'Please select a JSON file',\n        status: 'error',\n        duration: 5000,\n        isClosable: true,\n      });\n      return;\n    }\n\n    dispatch({ type: 'SET_LOADING', payload: true });\n    dispatch({ type: 'SET_ERROR', payload: null });\n\n    try {\n      const text = await file.text();\n      const data = JSON.parse(text);\n\n      if (!data.flashcards || !Array.isArray(data.flashcards)) {\n        throw new Error('Invalid JSON format: missing flashcards array');\n      }\n\n      if (data.flashcards.length === 0) {\n        throw new Error('No flashcards found in the JSON file');\n      }\n\n      dispatch({ type: 'SET_FLASHCARDS', payload: data.flashcards });\n      dispatch({ type: 'SET_METADATA', payload: data.metadata || {} });\n      \n      toast({\n        title: 'Success!',\n        description: `Loaded ${data.flashcards.length} flashcards from ${file.name}`,\n        status: 'success',\n        duration: 3000,\n        isClosable: true,\n      });\n    } catch (error) {\n      const errorMessage = `Failed to load JSON file: ${error instanceof Error ? error.message : 'Unknown error'}`;\n      dispatch({ type: 'SET_ERROR', payload: errorMessage });\n      \n      toast({\n        title: 'Error loading file',\n        description: errorMessage,\n        status: 'error',\n        duration: 5000,\n        isClosable: true,\n      });\n    }\n  }, [dispatch, toast]);\n\n  const handleDrop = useCallback((e: React.DragEvent) => {\n    e.preventDefault();\n    setIsDragOver(false);\n    \n    const files = e.dataTransfer.files;\n    if (files.length > 0) {\n      handleFileUpload(files[0]);\n    }\n  }, [handleFileUpload]);\n\n  const handleDragOver = useCallback((e: React.DragEvent) => {\n    e.preventDefault();\n    setIsDragOver(true);\n  }, []);\n\n  const handleDragLeave = useCallback((e: React.DragEvent) => {\n    e.preventDefault();\n    setIsDragOver(false);\n  }, []);\n\n  const handleFileInput = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    const file = e.target.files?.[0];\n    if (file) {\n      handleFileUpload(file);\n    }\n  }, [handleFileUpload]);\n\n  const handleSetSelect = useCallback((filename: string) => {\n    setSelectedSet(filename);\n    loadSelectedSet(filename);\n  }, [loadSelectedSet]);\n\n  if (state.flashcards.length > 0) {\n    return null;\n  }\n\n  return (\n    <AnimatePresence>\n      <motion.div\n        initial={{ opacity: 0, y: 20 }}\n        animate={{ opacity: 1, y: 0 }}\n        exit={{ opacity: 0, y: -20 }}\n        transition={{ duration: 0.5 }}\n        style={{ width: '100%' }}\n      >\n        <Box \n          bg={bgColor} \n          rounded=\"lg\" \n          shadow=\"lg\" \n          p={8} \n          mb={8}\n          borderWidth=\"1px\"\n          borderColor={borderColor}\n        >\n          <VStack spacing={6} textAlign=\"center\">\n            <motion.div\n              initial={{ scale: 0 }}\n              animate={{ scale: 1 }}\n              transition={{ delay: 0.2, type: \"spring\", stiffness: 200 }}\n            >\n              <Icon as={FolderOpen} w={16} h={16} color=\"blue.500\" />\n            </motion.div>\n            \n            <VStack spacing={4}>\n              <Heading size=\"lg\" color=\"gray.800\">\n                Welcome to Flashcard App! 🎓\n              </Heading>\n              \n              <Text color=\"gray.600\" fontSize=\"lg\">\n                Choose from your organized flashcard sets\n              </Text>\n            </VStack>\n\n            {/* Available Sets Section */}\n            {availableSets.length > 0 && (\n              <Box w=\"100%\" textAlign=\"left\">\n                <HStack justify=\"space-between\" mb={4}>\n                  <Text fontWeight=\"semibold\" color=\"gray.700\" fontSize=\"lg\">\n                    📁 Available Flashcard Sets\n                  </Text>\n                  <Button\n                    size=\"sm\"\n                    variant=\"ghost\"\n                    leftIcon={<Icon as={RefreshCw} />}\n                    onClick={scanForFlashcardSets}\n                    isLoading={isScanning}\n                  >\n                    Refresh\n                  </Button>\n                </HStack>\n                \n                <SimpleGrid columns={{ base: 1, md: 2 }} spacing={4}>\n                  {availableSets.map((set, index) => (\n                    <motion.div\n                      key={set.id}\n                      initial={{ opacity: 0, x: -20 }}\n                      animate={{ opacity: 1, x: 0 }}\n                      transition={{ delay: index * 0.1 }}\n                    >\n                      <Box\n                        p={4}\n                        borderWidth=\"1px\"\n                        borderColor={selectedSet === set.filename ? \"blue.300\" : \"gray.200\"}\n                        bg={selectedSet === set.filename ? \"blue.50\" : \"transparent\"}\n                        rounded=\"lg\"\n                        cursor=\"pointer\"\n                        _hover={{ \n                          borderColor: \"blue.300\",\n                          bg: \"blue.50\"\n                        }}\n                        onClick={() => handleSetSelect(set.filename)}\n                        transition=\"all 0.2s\"\n                      >\n                        <VStack align=\"start\" spacing={2}>\n                          <HStack justify=\"space-between\" w=\"100%\">\n                            <HStack spacing={3}>\n                              <Icon as={FileText} color=\"blue.500\" />\n                              <Text fontWeight=\"bold\" fontSize=\"md\">\n                                {set.title}\n                              </Text>\n                            </HStack>\n                            {selectedSet === set.filename && (\n                              <Badge colorScheme=\"blue\" variant=\"subtle\">\n                                Selected\n                              </Badge>\n                            )}\n                          </HStack>\n                          \n                          <Text fontSize=\"sm\" color=\"gray.600\">\n                            {set.description}\n                          </Text>\n                          \n                          <HStack spacing={2}>\n                            <Badge colorScheme=\"green\" variant=\"outline\">\n                              {set.card_count} cards\n                            </Badge>\n                            <Badge colorScheme=\"purple\" variant=\"outline\">\n                              {set.category}\n                            </Badge>\n                            <Badge colorScheme=\"orange\" variant=\"outline\">\n                              {set.difficulty}\n                            </Badge>\n                          </HStack>\n                        </VStack>\n                      </Box>\n                    </motion.div>\n                  ))}\n                </SimpleGrid>\n              </Box>\n            )}\n\n            {/* Divider */}\n            <Divider />\n\n            {/* Upload New File Section */}\n            <Box w=\"100%\" textAlign=\"left\">\n              <Text fontWeight=\"semibold\" color=\"gray.700\" mb={3}>\n                📤 Upload New Flashcard Set\n              </Text>\n              \n              <Box\n                borderWidth={2}\n                borderStyle=\"dashed\"\n                borderColor={isDragOver ? \"blue.500\" : \"gray.300\"}\n                bg={isDragOver ? \"blue.50\" : \"transparent\"}\n                rounded=\"lg\"\n                p={6}\n                transition=\"all 0.2s\"\n                _hover={{ borderColor: \"gray.400\" }}\n                onDrop={handleDrop}\n                onDragOver={handleDragOver}\n                onDragLeave={handleDragLeave}\n              >\n                <VStack spacing={4}>\n                  <label htmlFor=\"jsonFile\" style={{ cursor: 'pointer' }}>\n                    <motion.div\n                      whileHover={{ scale: 1.05 }}\n                      whileTap={{ scale: 0.95 }}\n                    >\n                      <Button \n                        colorScheme=\"brand\" \n                        size=\"lg\"\n                        leftIcon={<Icon as={Upload} />}\n                      >\n                        Choose JSON File\n                      </Button>\n                    </motion.div>\n                  </label>\n                  \n                  <input\n                    type=\"file\"\n                    id=\"jsonFile\"\n                    accept=\".json\"\n                    style={{ display: 'none' }}\n                    onChange={handleFileInput}\n                  />\n                  \n                  <Text fontSize=\"sm\" color=\"gray.500\">\n                    or drag and drop JSON file here\n                  </Text>\n                </VStack>\n              </Box>\n            </Box>\n\n            {/* Error Display */}\n            <AnimatePresence>\n              {state.error && (\n                <motion.div\n                  initial={{ opacity: 0, height: 0 }}\n                  animate={{ opacity: 1, height: 'auto' }}\n                  exit={{ opacity: 0, height: 0 }}\n                  style={{ width: '100%' }}\n                >\n                  <Alert status=\"error\" rounded=\"lg\">\n                    <AlertIcon />\n                    <Box>\n                      <AlertTitle>Error Loading File</AlertTitle>\n                      <AlertDescription>{state.error}</AlertDescription>\n                    </Box>\n                  </Alert>\n                </motion.div>\n              )}\n            </AnimatePresence>\n          </VStack>\n        </Box>\n      </motion.div>\n    </AnimatePresence>\n  );\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}